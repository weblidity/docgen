name: Update README

# ==============================
# 
# This GitHub Action updates the README file with the usage section generated from the CLI.
# It performs the following steps:
# 1. Checks out the repository.
# 2. Caches Node.js modules to speed up the workflow.
# 3. Installs dependencies.
# 4. Runs Prettier to format the CLI file.
# 5. Generates documentation if jsdoc.json exists.
# 6. Generates the usage section from the CLI.
# 7. Inserts the generated usage section into the README file.
# 8. Commits and pushes the changes to the repository.
# 9. Notifies on success or failure.
#
# To use this action, modify the CLI_PATH variable to point to your CLI file.
# ==============================

on:
  push:
    branches:
      - main

jobs:
  update-readme:
    runs-on: ubuntu-latest

    # Define environment variables
    env:
      CLI_PATH: ./bin/mock-cli.js  # Path to the CLI file

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Cache Node.js modules
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: npm install

    - name: Run Prettier
      run: npx prettier --write $CLI_PATH  # Format the CLI file using Prettier

    - name: Generate Documentation
      if: ${{ hashFiles('jsdoc.json') != '' }}
      run: npx jsdoc -c jsdoc.json  # Generate documentation if jsdoc.json exists

    - name: Generate Usage Section
      run: |
        node generate-usage.js $CLI_PATH  # Generate the usage section using the CLI file path

    - name: Insert content into README
      id: insert-content
      run: |
        CONTENT=$(cat USAGE.md)
        TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")
        CONTENT="<!-- Updated on $TIMESTAMP -->\n$CONTENT"
        
        # Check for existing block tags or short tag
        if grep -q '<!--- INSERT_BEGIN:USAGE.md --->' README.md && grep -q '<!--- INSERT_END:USAGE.md --->' README.md; then
          # Replace content between block tags
          awk '/<!--- INSERT_BEGIN:USAGE.md --->/{print;print CONTENT;found=1;next} /<!--- INSERT_END:USAGE.md --->/{found=0} !found' CONTENT="$CONTENT" README.md > README.tmp && mv README.tmp README.md
          echo "::set-output name=updated::true"
        elif grep -q '<!-- INSERT:USAGE.md -->' README.md; then
          # Replace short-format with block format and content
          awk '{print} /<!-- INSERT:USAGE.md -->/{print "<!--- INSERT_BEGIN:USAGE.md --->\n" CONTENT "\n<!--- INSERT_END:USAGE.md --->"}' CONTENT="$CONTENT" README.md > README.tmp && mv README.tmp README.md
          echo "::set-output name=updated::true"
        else
          # No updates to README file
          echo "No INSERT tags found in README.md. No updates made."
          echo "::set-output name=updated::false"
        fi
      shell: /usr/bin/bash -e {0}

    - name: Commit changes
      if: steps.insert-content.outputs.updated == 'true'
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add README.md
        git commit -m "Update README with usage content"
        git push

    - name: Notify on Success
      if: success()
      run: echo "The README update was successful!"

    - name: Notify on Failure
      if: failure()
      run: echo "The README update failed."
